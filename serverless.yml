# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: all-words

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs20.x
  profile: default
  region: us-east-1
  memorySize: 1024
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 's3:GetObject'
          Resource: 'arn:aws:s3:::gutenberg-data.oulipo.link/*'
        - Effect: 'Allow'
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource: 'arn:aws:s3:::words.oulipo.link/posts/*'
        - Effect: 'Allow'
          Action:
            - 's3:ListBucket'
          Resource: 'arn:aws:s3:::words.oulipo.link'
        - Effect: 'Allow'
          Action:
            - 'secretsmanager:GetSecretValue'
          Resource:
            - Fn::Join:
                - ':'
                - - 'arn'
                  - !Ref AWS::Partition
                  - 'secretsmanager'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - 'secret'
                  - 'all-words/mastodon-api'
            - Fn::Join:
                - ':'
                - - 'arn'
                  - !Ref AWS::Partition
                  - 'secretsmanager'
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - 'secret'
                  - 'all-words/mastodon-api-??????'
        - Effect: 'Allow'
          Action:
            - 'sqs:SendMessage'
            - 'sqs:SendMessageBatch'
          Resource:
            Fn::GetAtt:
              - FanOutQueue
              - Arn
        - Effect: 'Allow'
          Action:
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:DeleteItem'
            - 'dynamodb:PutItem'
          Resource:
            Fn::GetAtt:
              - StatsTable
              - Arn

custom:
  esbuild:
    exclude:
      - '@aws-sdk'
    format: esm
    target: node20
    sourcemap: true
    outExtension:
      '.js': '.mjs'

functions:
  hello:
    handler: src/post.default
    events:
      - schedule:
          rate: rate(4 hours)
          enabled: true
    environment:
      NODE_OPTIONS: '--enable-source-maps'
  statsEnqueuer:
    timeout: 600
    handler: src/stats.enqueuer
    environment:
      SQS_QUEUE_URL:
        Ref: FanOutQueue
      NODE_OPTIONS: '--enable-source-maps'
#  statsDequeuer:
#    timeout: 50
#    handler: src/stats.dequeuer
#    reservedConcurrency: 5
#    memorySize: 2048
#    events:
#      - sqs:
#          arn:
#            Fn::GetAtt:
#              - FanOutQueue
#              - Arn
#          batchSize: 5
#          enabled: false

resources:
  Resources:
    FanOutQueue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 60
    StatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: gutenberg-valditity-info
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S

plugins:
  - serverless-esbuild
